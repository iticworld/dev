/**
 *
 * @author      novemberizing <novemberizing@gmail.com>
 * @since       0.0.1
 * @date        2018. 6. 7.
 */

#ifndef   __NOVEMBERIZING__BINARY_SEARCH_TREE__HP__
#define   __NOVEMBERIZING__BINARY_SEARCH_TREE__HP__

#include <novemberizing/binary/search/tree.hh>

namespace novemberizing
{
    namespace binary
    {
        namespace search
        {
            template <typename T, typename TUPLE>
            const TUPLE & tree<T, TUPLE>::__tuple(node * n)
            {
                if(n == nullptr)
                {
                    throw exception();
                }
                return n->tuple;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__parent(node * n)
            {
                return n != nullptr ? n->parent() : nullptr;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__parent(node * n, node * x)
            {
                n->parent(x);
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__sibling(node * n)
            {
                node * parent = __parent(n);
                return parent != nullptr ? (parent->left() == n ? parent->right() : parent->left()) : nullptr;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__minimum(node * n)
            {
                if(n == nullptr)
                {
                    return nullptr;
                }
                while(n->left()!=nullptr){ n = n->left(); }
                return n;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__maximum(node * n)
            {
                if(n == nullptr)
                {
                    return nullptr;
                }
                while(n->right()!=nullptr){ n = n->right(); }
                return n;
            }

            template <typename T, typename TUPLE>
            uint64 tree<T, TUPLE>::__depth(node * n)
            {
                if(n == nullptr)
                {
                    return (uint64)(-1);
                }
                uint64 v = 0;
                while(n->parent() != nullptr)
                {
                    v += 1;
                    n = n->parent();
                }
                return v;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__left(node * n)
            {
                return n != nullptr ? n->left() : nullptr;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__right(node * n)
            {
                return n != nullptr ? n->right() : nullptr;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__left(node * n, node * x)
            {
                n->left(x);
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__right(node * n, node * x)
            {
                n->right(x);
            }

            template <typename T, typename TUPLE>
            tree<T, TUPLE>::tree() : __root(nullptr), __size(0)
            {
            }

            template <typename T, typename TUPLE>
            tree<T, TUPLE>::tree(const tree<T, TUPLE> & o) : __root(nullptr), __size(0)
            {
                __copy(o);
            }

            template <typename T, typename TUPLE>
            tree<T, TUPLE>::tree(tree<T, TUPLE> && o) noexcept : __root(o.__root), __size(o.__size)
            {
                o.__root = nullptr;
                o.__size = 0;
            }

            template <typename T, typename TUPLE>
            tree<T, TUPLE>::~tree()
            {
                __clear();
            }

            template <typename T, typename TUPLE>
            tree<T, TUPLE> & tree<T, TUPLE>::operator=(tree<T, TUPLE> && o) noexcept
            {
                if(&o != this)
                {
                    __clear();
                    __root = o.__root;
                    __size = o.__size;
                }
                return *this;
            }

            template <typename T, typename TUPLE>
            tree<T, TUPLE> & tree<T, TUPLE>::operator=(const tree<T, TUPLE> & o)
            {
                if(&o != this)
                {
                    __clear();
                    __copy(o);
                }
                return *this;
            }

            template <typename T, typename TUPLE> iterator<TUPLE> tree<T, TUPLE>::begin() { return iterator<TUPLE>::accessor::create(this, reinterpret_cast<uint64>(__minimum(__root))); }
            template <typename T, typename TUPLE> iterator<TUPLE> tree<T, TUPLE>::end() { return iterator<TUPLE>::accessor::create(this, 0); }

            template <typename T, typename TUPLE> const iterator<TUPLE> tree<T, TUPLE>::begin() const { return iterator<TUPLE>::accessor::create(this, reinterpret_cast<uint64>(__minimum(__root))); }
            template <typename T, typename TUPLE> const iterator<TUPLE> tree<T, TUPLE>::end() const { return iterator<TUPLE>::accessor::create(this, 0); }

            template <typename T, typename TUPLE> void tree<T, TUPLE>::clear(function<void (TUPLE &)> f) { __clear(f); }
            template <typename T, typename TUPLE> void tree<T, TUPLE>::clear(){ __clear(); };

            template <typename T, typename TUPLE> void tree<T, TUPLE>::empty(function<void (bool)> f) const
            {
                if(f != nullptr)
                {
                    f(__size == 0);
                }
            }

            template <typename T, typename TUPLE> bool tree<T, TUPLE>::empty() const { return __size == 0; }

            template <typename T, typename TUPLE> void tree<T, TUPLE>::size(function<void (int64)> f) const
            {
                if(f != nullptr)
                {
                    f(__size);
                }
            }

            template <typename T, typename TUPLE> uint64 tree<T, TUPLE>::size() const { return __size; }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::each(function<void (const TUPLE &)> f) const
            {
                if(f != nullptr)
                {
                    container::lock();
                    node * n = __minimum(__root);
                    while(n != nullptr)
                    {
                        container::lock();
                        f(n->tuple);
                        container::unlock();
                        n = __next(n);
                    }
                    container::unlock();
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(TUPLE && o, function<void (TUPLE &)> f, function<void (const exception &)> e)
            {
                container::lock();
                node * n = __del(o.first);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n->tuple);
                    }
                    delete n;
                }
                else
                {
                    if(e != nullptr)
                    {
                        e(exception());
                    }
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(const TUPLE & o, function<void (TUPLE &)> f, function<void (const exception &)> e)
            {
                container::lock();
                node * n = __del(o.first);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n->tuple);
                    }
                    delete n;
                }
                else
                {
                    if(e != nullptr)
                    {
                        e(exception());
                    }
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(const TUPLE & o, function<void (bool)> f)
            {
                container::lock();
                node * n = __del(o.first);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n != nullptr);
                    }
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(TUPLE && o, function<void (bool)> f)
            {
                container::lock();
                node * n = __del(o.first);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n != nullptr);
                    }
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::del(const TUPLE & o)
            {
                container::lock();
                node * n = __del(o.first);
                container::unlock();
                if(n != nullptr)
                {
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::del(TUPLE && o)
            {
                container::lock();
                node * n = __del(o.first);
                container::unlock();
                if(n != nullptr)
                {
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(T && o, function<void (TUPLE &)> f, function<void (const exception &)> e)
            {
                container::lock();
                node * n = __del(o);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n->tuple);
                    }
                    delete n;
                }
                else
                {
                    if(e != nullptr)
                    {
                        e(exception());
                    }
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(const T & o, function<void (TUPLE &)> f, function<void (const exception &)> e)
            {
                container::lock();
                node * n = __del(o);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n->tuple);
                    }
                    delete n;
                }
                else
                {
                    if(e != nullptr)
                    {
                        e(exception());
                    }
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(const T & o, function<void (bool)> f)
            {
                container::lock();
                node * n = __del(o);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n != nullptr);
                    }
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::del(T && o, function<void (bool)> f)
            {
                container::lock();
                node * n = __del(o);
                container::unlock();
                if(n != nullptr)
                {
                    if(f != nullptr)
                    {
                        f(n != nullptr);
                    }
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::del(const T & o)
            {
                container::lock();
                node * n = __del(o);
                container::unlock();
                if(n != nullptr)
                {
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::del(T && o)
            {
                container::lock();
                node * n = __del(o);
                container::unlock();
                if(n != nullptr)
                {
                    delete n;
                }
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::add(const TUPLE & o)
            {
                container::lock();
                node * n = __add(o);
                container::unlock();
                return n != nullptr;
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::add(TUPLE && o)
            {
                container::lock();
                node * n = __add(move(o));
                container::unlock();
                return n != nullptr;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::add(const TUPLE & o, function<void (bool)> f)
            {
                container::lock();
                node * n = __add(o);
                container::unlock();
                if(f != nullptr)
                {
                    f(n != nullptr);
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::add(TUPLE && o, function<void (bool)> f)
            {
                container::lock();
                node * n = __add(move(o));
                container::unlock();
                if(f != nullptr)
                {
                    f(n != nullptr);
                }
            }

            template <typename T, typename TUPLE>
            uint64 tree<T, TUPLE>::previous(uint64 i)
            {
                node * n = reinterpret_cast<node *>(i);
                if(n != nullptr)
                {
                    return reinterpret_cast<uint64>(__previous(n));
                }
                return reinterpret_cast<uint64>(__maximum(__root));
            }

            template <typename T, typename TUPLE>
            uint64 tree<T, TUPLE>::next(uint64 i)
            {
                node * n = reinterpret_cast<node *>(i);
                if(n != nullptr)
                {
                    return reinterpret_cast<uint64>(__next(n));
                }
                return reinterpret_cast<uint64>(__minimum(__root));
            }

            template <typename T, typename TUPLE>
            TUPLE & tree<T, TUPLE>::reference(uint64 i)
            {
                node * n = reinterpret_cast<node *>(i);
                if(n == nullptr)
                {
                    throw exception();
                }
                return n->tuple;
            }

            template <typename T, typename TUPLE>
            TUPLE * tree<T, TUPLE>::pointer(uint64 i)
            {
                node * n = reinterpret_cast<node *>(i);
                if(n == nullptr)
                {
                    throw exception();
                }
                return &n->tuple;
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::exist(const TUPLE & o) const
            {
                container::lock();
                node * n = __search(o.first);
                container::unlock();
                return n != nullptr;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::exist(const TUPLE & o, function<void (bool)> f) const
            {
                container::lock();
                node * n = __search(o.first);
                container::unlock();
                if(f != nullptr)
                {
                    f(n != nullptr);
                }
            }

            template <typename T, typename TUPLE>
            bool tree<T, TUPLE>::exist(TUPLE && o) const
            {
                container::lock();
                node * n = __search(o.first);
                container::unlock();
                return n != nullptr;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::exist(TUPLE && o, function<void (bool)> f) const
            {
                container::lock();
                node * n = __search(o.first);
                container::unlock();
                if(f != nullptr)
                {
                    f(n != nullptr);
                }
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__next(node * n) const
            {
                if(n != nullptr)
                {
                    if(n->right())
                    {
                        return __minimum(n->right());
                    }
                    else
                    {
                        while(n)
                        {
                            if(__left(n->parent()) == n)
                            {
                                return n->parent();
                            }
                            n = n->parent();
                        }
                        return nullptr;
                    }
                }
                return __minimum(__root);
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__previous(node * n) const
            {
                if(n != nullptr)
                {
                    if(n->left())
                    {
                        return __maximum(n->left());
                    }
                    else
                    {
                        while(n)
                        {
                            if(__right(n->parent()) == n)
                            {
                                return n->parent();
                            }
                            n = n->parent();
                        }
                        return nullptr;
                    }
                }
                return __maximum(__root);
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__search(const T & o) const
            {
                node * n = __root;
                while(n != nullptr)
                {
                    if(n->tuple.first == o)
                    {
                        return n;
                    }
                    if(n->tuple.first < o)
                    {
                        n = n->right();
                    }
                    else
                    {
                        n = n->left();
                    }
                }
                return nullptr;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__search(T && o) const
            {
                node * n = __root;
                while(n != nullptr)
                {
                    if(n->tuple.first == o)
                    {
                        return n;
                    }
                    if(n->tuple.first < o)
                    {
                        n = n->right();
                    }
                    else
                    {
                        n = n->left();
                    }
                }
                return nullptr;
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__add(const TUPLE & o)
            {
                node * n = __root;
                if(n == nullptr)
                {
                    __size += 1;
                    return __root = new node(o, nullptr);
                }
                while(n != nullptr)
                {
                    if(n->tuple.first == o.first)
                    {
                        n->tuple = o;
                        return n;
                    }
                    if(n->tuple.first < o.first)
                    {
                        if(n->right() == nullptr)
                        {
                            n->right(new node(o, n));
                            return n->right();
                        }
                        n = n->right();
                    }
                    else
                    {
                        if(n->left() == nullptr)
                        {
                            n->left(new node(o, n));
                            return n->left();
                        }
                        n = n->left();
                    }
                }
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__add(TUPLE && o)
            {
                node * n = __root;
                if(n == nullptr)
                {
                    __size += 1;
                    return __root = new node(move(o), nullptr);
                }
                while(n != nullptr)
                {
                    if(n->tuple.first == o.first)
                    {
                        n->tuple = o;
                        return n;
                    }
                    if(n->tuple.first < o.first)
                    {
                        if(n->right() == nullptr)
                        {
                            __size += 1;
                            n->right(new node(move(o), n));
                            return n->right();
                        }
                        n = n->right();
                    }
                    else
                    {
                        if(n->left() == nullptr)
                        {
                            __size += 1;
                            n->left(new node(o, n));
                            return n->left();
                        }
                        n = n->left();
                    }
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__change(node * n, node * x)
            {
                if(n->parent())
                {
                    if(__left(n->parent()) == n)
                    {
                        __left(n->parent(), x);
                    }
                    else
                    {
                        __right(n->parent(), x);
                    }
                }
                else
                {
                    __root = x;
                }
                if(x != nullptr)
                {
                    x->parent(n->parent());
                }
            }

            template <typename T, typename TUPLE>
            typename tree<T, TUPLE>::node * tree<T, TUPLE>::__del(const T & o)
            {
                node * n = __search(o);
                if(n != nullptr)
                {
                    if(n->left() == nullptr)
                    {
                        __change(n, n->right());
                    }
                    else if(n->right() == nullptr)
                    {
                        __change(n, n->left());
                    }
                    else
                    {
                        node * min = __minimum(n->right());
                        __change(min, min->right());
                        __change(n, min);
                        min->left(n->left());
                        __parent(min->left(), min);
                        min->right(n->right());
                        if(min->right())
                        {
                            __parent(min->right(), min);
                        }
                        return n;
                    }
                    __size -= 1;
                }
                return n;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__clear()
            {
                node * n = __root;
                while(n != nullptr)
                {
                    if(n->left())
                    {
                        n = n->left();
                    }
                    else if(n->right())
                    {
                        n = n->right();
                    }
                    else
                    {
                        node * current = n;
                        n = n->parent();
                        __change(current, nullptr);
                        delete current;
                    }
                }
                __size = 0;
                __root = nullptr;
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__clear(function<void (TUPLE &)> f)
            {
                if(f != nullptr)
                {
                    node * n = __root;
                    while(n != nullptr)
                    {
                        if(n->left())
                        {
                            n = n->left();
                        }
                        else if(n->right())
                        {
                            n = n->right();
                        }
                        else
                        {
                            node * current = n;
                            n = n->parent();
                            __change(current, nullptr);
                            f(current->tuple);
                            delete current;
                        }
                    }
                    __size = 0;
                    __root = nullptr;
                }
                else
                {
                    __clear();
                }
            }

            template <typename T, typename TUPLE>
            void tree<T, TUPLE>::__copy(const tree<T, TUPLE> & o)
            {
                __clear();
                node * y = __root = new node(o.__root->tuple);
                node * x = o.__root;
                do
                {
                    if(x->left() && y->left() == nullptr)
                    {
                        __size += 1;
                        y->left(new node(x->tuple, y));
                        x = x->left();
                        y = y->left();
                    }
                    else if(x->right() && y->right() == nullptr)
                    {
                        __size += 1;
                        y->right(new node(x->tuple, y));
                        x = x->right();
                        y = y->right();
                    }
                    else
                    {
                        x = x->parent();
                        y = y->parent();
                    }
                } while(x != o.__root || (x == o.__root && x->right() != nullptr && y->right() == nullptr));
            }

//            template <typename T, typename TUPLE>
//            string tree<T, TUPLE>::json(function<string (const TUPLE &)> f)
//            {
//                string v;
//                v += "{\"v\":[";
//                uint64 depth = 0;
//                if(__root != nullptr)
//                {
//                    node ** o = memory::allocate<node *>(1);
//                    uint64 count = 1;
//                    o[0] = __root;
//                    while(count > 0)
//                    {
//                        count = 0;
//                        depth += 1;
//                        o = memory::allocate<node *>(o, 1UL << (depth + 1));
//                        uint64 start = (1UL << (depth - 1)) - 1;
//                        uint64 end = (1UL << depth) - 1;
//                        for(uint64 i = start; i < end; i++)
//                        {
//                            if(o[i])
//                            {
//                                o[end + (i - start) * 2 + 0] = o[i]->left();
//                                o[end + (i - start) * 2 + 1] = o[i]->right();
//                                if(o[i]->left() || o[i]->right())
//                                {
//                                    count += 1;
//                                }
//                            }
//                            else
//                            {
//                                o[end + (i - start) * 2 + 0] = nullptr;
//                                o[end + (i - start) * 2 + 1] = nullptr;
//                            }
//                        }
//                    }
//                    for(uint64 i = 0; i < depth; i++)
//                    {
//                        uint64 step = (1UL << (depth - (i + 1)));
//                        uint64 x = 0;
//                        for(uint64 start = (1UL << i) - 1; start < ((1UL << i + 1) - 1); start++)
//                        {
//                            x += step;
//                            if(o[start]!=nullptr)
//                            {
//                                if(v.size()==6)
//                                {
//                                    v += string::format("{\"x\":%ld,\"y\":%ld,\"v\":\"%s\"}", x, depth - i, f(o[start]->tuple).v());
//                                }
//                                else
//                                {
//                                    v += string::format(",{\"x\":%ld,\"y\":%ld,\"v\":\"%s\"}", x, depth - i, f(o[start]->tuple).v());
//                                }
//                            }
//                            x += step;
//                        }
//                    }
//                    memory::deallocate<node *>(o);
//                }
//                v += string::format("],\"horizontal\":%ld,\"vertical\":%ld}", 1 << depth, depth);
//                return v;
//            }

            template <typename T, typename TUPLE>
            iterator<TUPLE> tree<T, TUPLE>::get(const T & k)
            {
                return iterator<TUPLE>::accessor::create(this, reinterpret_cast<uint64>(__search(k)));
            }

            template <typename T, typename TUPLE>
            const iterator<TUPLE> tree<T, TUPLE>::get(const T & k) const
            {
                return iterator<TUPLE>::accessor::create(this, reinterpret_cast<uint64>(__search(k)));
            }
        }
    }
}

#endif // __NOVEMBERIZING__BINARY_SEARCH_TREE__HP__
