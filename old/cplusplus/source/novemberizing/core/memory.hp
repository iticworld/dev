/**
 *
 * @author      novemberizing <novemberizing@gmail.com>
 * @since       0.0.1
 * @date        2018. 6. 4.
 */

#ifndef   __NOVEMBERIZING__CORE__MEMORY__HP__
#define   __NOVEMBERIZING__CORE__MEMORY__HP__

#include <novemberizing/core/memory.hh>

namespace novemberizing
{
    namespace core
    {
        template <typename T>
        inline T * memory::allocate(uint64 n) { return static_cast<T *>(__allocate(n * sizeof(T))); }

        template <>
        inline void * memory::allocate<void>(novemberizing::uint64 n) { return __allocate(n); }

        template <typename T>
        inline T * memory::deallocate(T * p) { return static_cast<T *>(__deallocate(p)); }

        template <typename T>
        inline T * memory::allocate(T * p, uint64 n) { return static_cast<T *>(__allocate(p, n * sizeof(T))); }

        template <>
        inline void * memory::allocate(void * p, uint64 n) { return __allocate(p, n); }

        template <typename T>
        inline T * memory::copy(T * destination, const T * source, uint64 n)
        {
            for(uint64 i = 0; i < n; i++)
            {
                destination[i] = source[i];
            }
            return destination;
        }

        template <>
        inline void * memory::copy(void * destination, const void * source, uint64 n)
        {
            return __copy(destination, source, n);
        }

        template <>
        inline char * memory::copy<char>(char * destination, const char * source, uint64 n)
        {
            return static_cast<char *>(__copy(destination, source, n));
        }

        template <>
        inline unsigned char * memory::copy<unsigned char>(unsigned char * destination, const unsigned char * source, uint64 n)
        {
            return static_cast<unsigned char *>(__copy(destination, source, n));
        }

        template <>
        inline signed char * memory::copy<signed char>(signed char * destination, const signed char * source, uint64 n)
        {
            return static_cast<signed char *>(__copy(destination, source, n));
        }

        template <typename T>
        inline T * memory::move(T * destination, const T * source, uint64 n)
        {
            return static_cast<T *>(__move(destination, source, sizeof(T) * n));
        }

        template <>
        inline void * memory::move(void * destination, const void * source, uint64 n)
        {
            return __move(destination, source, n);
        }

        template <typename T>
        inline T * memory::fill(T * destination, const T & o, uint64 n)
        {
            if(destination != nullptr)
            {
                for(uint64 i = 0; i < n; i++)
                {
                    destination[i] = o;
                }
            }
            else
            {
                if(n > 0)
                {
                    /** error */
                }
            }
            return destination;
        }

        template <>
        inline char * memory::fill<char>(char * destination, const char & c, uint64 n)
        {
            return static_cast<char *>(__fill(destination, c, n));
        }

        template <>
        inline unsigned char * memory::fill<unsigned char>(unsigned char * destination, const unsigned char & c, uint64 n)
        {
            return static_cast<unsigned char *>(__fill(destination, c, n));
        }

        template <>
        inline signed char * memory::fill<signed char>(signed char * destination, const signed char & c, uint64 n)
        {
            return static_cast<signed char *>(__fill(destination, c, n));
        }

        template <typename T>
        inline T * memory::fill(T * destination, T && o, uint64 n)
        {
            if(destination != nullptr)
            {
                for(uint64 i = 0; i < n; i++)
                {
                    destination[i] = o;
                }
            }
            else
            {
                if(n > 0)
                {
                    /** error */
                }
            }
            return destination;
        }

        template <>
        inline char * memory::fill<char>(char * destination, char && c, uint64 n)
        {
            return static_cast<char *>(__fill(destination, c, n));
        }

        template <>
        inline unsigned char * memory::fill<unsigned char>(unsigned char * destination, unsigned char && c, uint64 n)
        {
            return static_cast<unsigned char *>(__fill(destination, c, n));
        }

        template <>
        inline signed char * memory::fill<signed char>(signed char * destination, signed char && c, uint64 n)
        {
            return static_cast<signed char *>(__fill(destination, c, n));
        }
    }
}

#endif // __NOVEMBERIZING__CORE__MEMORY__HP__
