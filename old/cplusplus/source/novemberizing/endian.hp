/**
 *
 *
 * @author      novemberizing <novemberizing@gmail.com>
 * @since       0.0.1
 * @date        2018. 6. 17.
 */

#ifndef   __NOVEMBERIZING__ENDIAN__HP__
#define   __NOVEMBERIZING__ENDIAN__HP__

#include <novemberizing/endian.hp>

namespace novemberizing
{
    inline endian::type endian::get()
    {
        int16 number = 0x1;
        char * p = (char *)(&number);
        return p[0] == 1 ? little : big;
    }

    inline endian::endian()
    {
    }

    inline endian::endian(const endian & o)
    {
    }

    inline endian::endian(endian && o) noexcept
    {
    }

    inline endian::~endian()
    {
    }

    inline endian & endian::operator=(const endian & o)
    {
        return *this;
    }

    inline endian & endian::operator=(endian && o) noexcept
    {
        return *this;
    }

    inline uint16 endian::convert(uint16 v)
    {
        return (uint16) (((v & 0xFF00) >> 8) |
                         ((v & 0x00FF) << 8));
    }

    inline uint32 endian::convert(uint32 v)
    {
        return (uint32) (((v & 0xFF000000) >> 24) |
                         ((v & 0x00FF0000) >>  8) |
                         ((v & 0x0000FF00) <<  8) |
                         ((v & 0x000000FF) << 24));
    }

    inline uint64 endian::convert(uint64 v)
    {
        return (uint64) (((v & 0xFF00000000000000) >> 56) |
                         ((v & 0x00FF000000000000) >> 40) |
                         ((v & 0x0000FF0000000000) >> 24) |
                         ((v & 0x000000FF00000000) >>  8) |
                         ((v & 0x00000000FF000000) <<  8) |
                         ((v & 0x0000000000FF0000) << 24) |
                         ((v & 0x000000000000FF00) << 40) |
                         ((v & 0x00000000000000FF) << 56));
    }

    inline int16 endian::convert(int16 v)
    {
        return (int16) (((v & 0xFF00) >> 8) |
                        ((v & 0x00FF) << 8));
    }

    inline int32 endian::convert(int32 v)
    {
        return (int32) (((v & 0xFF000000) >> 24) |
                        ((v & 0x00FF0000) >>  8) |
                        ((v & 0x0000FF00) <<  8) |
                        ((v & 0x000000FF) << 24));
    }

    inline int64 endian::convert(int64 v)
    {
        return (int64) (((v & 0xFF00000000000000) >> 56) |
                        ((v & 0x00FF000000000000) >> 40) |
                        ((v & 0x0000FF0000000000) << 24) |
                        ((v & 0x000000FF00000000) >>  8) |
                        ((v & 0x00000000FF000000) <<  8) |
                        ((v & 0x0000000000FF0000) << 24) |
                        ((v & 0x000000000000FF00) << 40) |
                        ((v & 0x00000000000000FF) << 56));
    }
}

#endif // __NOVEMBERIZING__ENDIAN__HP__
